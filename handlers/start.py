# -*- coding: utf-8 -*-
import codecs
import datetime
import json
import logging
from asyncio import sleep

import aiogram.types
from aiogram.dispatcher import FSMContext

from loader import bot, dp
from config import ADMINS
from aiogram import types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, \
    InlineQueryResultArticle, InputMessageContent, ContentType, File, ReplyKeyboardRemove, WebAppInfo
from dir.keyboards import keyboards
import dir.DBCommands as db

import dir.states as states
from loader import scheduler

kb = keyboards()

speakers = [
    '–ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–µ–¥–æ—Ä–æ–≤–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ê–≤—Ç–æ, –£—Å–ª—É–≥–∏, –†–∞–±–æ—Ç–∞',
    '–í–∏—Ç–∞–ª–∏–π –¢—É–º–∞–Ω–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–ê–Ω–¥—Ä–µ–π –†—ã–±–∏–Ω—Ü–µ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º',
    '–ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∞—Å–æ–≤, –¥–∏–∑–∞–π–Ω-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞–ø—É—Å—Ç–∏–Ω, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–æ–¥—É–∫—Ç–æ–≤'
]

themes = [
    [
        '–ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–µ–π –≤ –∑—Ä–µ–ª—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö',
        '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥',
        '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–æ–º–∞–Ω–¥—ã'
    ],
    [
        '–ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –±–∏–∑–Ω–µ—Å–æ–º',
        '–ö–∞–∫ –ø—Ä–æ—Å—Ç—Ä–æ–∏—Ç—å product-led organization',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–¥—É–∫—Ç'
    ],
    [
        'ML powered –ø—Ä–æ–¥—É–∫—Ç—ã',
        '–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö',
        '–ó–∞—á–µ–º –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–∑—É—á–∞—Ç—å ML –∏ AI',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –∫–∞–ª—å—è–Ω–Ω–æ–π (–±–æ–Ω—É—Å!)'
    ],
    [
        '–ö–∞–∫ –æ–±–Ω–æ–≤–ª—è—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
        '–ö–∞–∫ –¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω —Å—É–ø–µ—Ä–∞–ø–ø–∞',
        '–ë—Ä–µ–Ω–¥–∏–Ω–≥ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ',
        '–ö–∞–∫–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä –≤–∞–º –Ω—É–∂–µ–Ω'
    ],
    [
        '–§–∏–Ω—Ç–µ—Ö: –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—Ç—å',
        '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è: –∫–∞–∫ –Ω–∞–π—Ç–∏ –∏–¥–µ—é –∏ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É',
        'Customer success –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
    ]
]

slots = ['12.00-12.20', '12.30-12.50', '13.00-13.20', '13.30-13.50', '14.00-14.20', '14.30-14.50', '15.00-15.20',
         '15.30-15.50', '16.00-16.20', '16.30-16.50', '17.00-17.20', '17.30-17.50', '10.00-10.20', '10.30-10.50',
         '11.00-11.20', '11.30-11.50']
slots_speakers = [
    [6, 7, 8, 9, 10, 11],
    [6, 7, 8, 9, 10, 11],
    [6, 7, 8, 9, 10, 11],
    [0, 1, 2, 3, 4, 5],
    [12, 13, 14, 15, 0, 1]
]

group_id = -982049044
@dp.message_handler(commands='start', state='*')
async def start(message: Message):
    chat_ids = db.get_all_chat_id()
    chat_id = message.from_user.id

    if (chat_id,) not in chat_ids:
        username = message.from_user.username
        db.add_user(chat_id, username)

    state_conf = db.get_state_conf(chat_id)
    # if state_conf == False:


    await message.answer_chat_action('upload_document')
    await message.answer_document(document=open("Politika_konfidencial'nosti_internet_sajta_1.pdf", 'rb'))
    await message.answer_chat_action('upload_document')
    await message.answer_document(document=open('–°–æ–≥–ª–∞—Å–∏–µ.pdf', 'rb'),
                                  caption='–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç-–±–æ—Ç–æ–º, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                                  reply_markup=kb.agree)
    db.set_state_conf(chat_id)


@dp.callback_query_handler(text='agree')
async def reg1(call: CallbackQuery):
    chat_id = call.from_user.id

    await bot.send_message(chat_id=chat_id, text='–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è)\n'
                                                 '–ù–∞–ø–∏—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—éüëá')
    await states.reg.NAME.set()


@dp.message_handler(state=states.reg.NAME)
async def reg2(message: Message):
    chat_id = message.from_user.id
    name = message.text
    if len(name) <= 1:
        return
    db.set_name(chat_id, name)
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏, –∫–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?')
    await states.reg.PROF.set()


@dp.message_handler(state=states.reg.PROF)
async def reg3(message: Message):
    chat_id = message.from_user.id
    prof = message.text

    db.set_prof(chat_id, prof)
    await message.answer('–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏? üòå')
    await states.reg.COMPANY.set()


@dp.message_handler(state=states.reg.COMPANY)
async def reg4(message: Message):
    chat_id = message.from_user.id
    company = message.text

    db.set_company(chat_id, company)
    await message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                         '–û–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–≤—è–∑–∏ üôåüèª', reply_markup=kb.phone)
    await states.reg.PHONE.set()


@dp.message_handler(state=states.reg.PHONE)
async def reg5(message: Message):
    chat_id = message.from_user.id
    phone = message.text


    db.set_phone(chat_id, phone)

    text = '–£—Ä–∞, –ø–æ—á—Ç–∏ –≤—Å—ë!\n' \
           '–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è üòå\n\n' \
           '‚Äì –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–µ–¥–æ—Ä–æ–≤–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ê–≤—Ç–æ, –£—Å–ª—É–≥–∏, –†–∞–±–æ—Ç–∞\n' \
           '‚Äì –í–∏—Ç–∞–ª–∏–π –¢—É–º–∞–Ω–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
           '‚Äì –ê–Ω–¥—Ä–µ–π –†—ã–±–∏–Ω—Ü–µ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º\n' \
           '‚Äì –ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∞—Å–æ–≤, –¥–∏–∑–∞–π–Ω-–¥–∏—Ä–µ–∫—Ç–æ—Ä\n' \
           '‚Äì –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞–ø—É—Å—Ç–∏–Ω, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
    await message.answer(text, reply_markup=kb.speakers)
    await states.reg.CHOOSE_SPEAKER.set()



@dp.message_handler(state=states.reg.PHONE, content_types=types.ContentType.CONTACT)
async def reg5_1(message: Message):
    chat_id = message.from_user.id
    phone = message.contact.phone_number

    db.set_phone(chat_id, phone)
    text = '–£—Ä–∞, –ø–æ—á—Ç–∏ –≤—Å—ë!\n' \
           '–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è üòå\n\n' \
           '1. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–µ–¥–æ—Ä–æ–≤–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ê–≤—Ç–æ, –£—Å–ª—É–≥–∏, –†–∞–±–æ—Ç–∞\n' \
           '2. –í–∏—Ç–∞–ª–∏–π –¢—É–º–∞–Ω–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
           '3. –ê–Ω–¥—Ä–µ–π –†—ã–±–∏–Ω—Ü–µ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º\n' \
           '4. –ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∞—Å–æ–≤, –¥–∏–∑–∞–π–Ω-–¥–∏—Ä–µ–∫—Ç–æ—Ä\n' \
           '5. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞–ø—É—Å—Ç–∏–Ω, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
    await message.answer(text, reply_markup=kb.speakers)
    await states.reg.CHOOSE_SPEAKER.set()


@dp.callback_query_handler(lambda c: c.data[:7] == 'speaker', state=states.reg.CHOOSE_SPEAKER)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    speaker_id = int(call.data[7:])
    text = f'{speakers[speaker_id - 1]}\n\n' \
           '–¢–µ–º—ã:'
    i = 1
    keyboard = InlineKeyboardMarkup()
    for el in themes[speaker_id - 1]:
        text += f'\n{i}. {el}'
        keyboard.add(InlineKeyboardButton(f'–¢–µ–º–∞ {i}', callback_data=f'theme_{i}_sp_{speaker_id}'))
        i += 1
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)
    await states.reg.CHOOSE_THEME.set()


@dp.callback_query_handler(text='back', state=states.reg.CHOOSE_THEME)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    text = '–£—Ä–∞, –ø–æ—á—Ç–∏ –≤—Å—ë!\n' \
           '–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è üòå\n\n' \
           '1. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–µ–¥–æ—Ä–æ–≤–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ê–≤—Ç–æ, –£—Å–ª—É–≥–∏, –†–∞–±–æ—Ç–∞\n' \
           '2. –í–∏—Ç–∞–ª–∏–π –¢—É–º–∞–Ω–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
           '3. –ê–Ω–¥—Ä–µ–π –†—ã–±–∏–Ω—Ü–µ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º\n' \
           '4. –ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∞—Å–æ–≤, –¥–∏–∑–∞–π–Ω-–¥–∏—Ä–µ–∫—Ç–æ—Ä\n' \
           '5. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞–ø—É—Å—Ç–∏–Ω, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=kb.speakers)
    await states.reg.CHOOSE_SPEAKER.set()


@dp.callback_query_handler(lambda c: c.data[:5] == 'theme', state=states.reg.CHOOSE_THEME)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    theme_id = call.data[6]
    speaker_id = call.data[11]
    keyboard = InlineKeyboardMarkup()
    if int(speaker_id) <= 3:
        keyboard.add(InlineKeyboardButton('4 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_1'))
        keyboard.add(InlineKeyboardButton('5 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_2'))
    elif int(speaker_id) == 4:
        keyboard.add(InlineKeyboardButton('4 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_1'))
    elif int(speaker_id) == 5:
        keyboard.add(InlineKeyboardButton('5 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_2'))

    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'back_{speaker_id}'))

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É üëá',
                                reply_markup=keyboard)
    await states.reg.CHOOSE_DATE.set()


@dp.callback_query_handler(lambda c: c.data[:4] == 'back', state=states.reg.CHOOSE_DATE)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    speaker_id = int(call.data[5])

    text = f'{speakers[speaker_id - 1]}\n\n' \
           '–¢–µ–º—ã:'
    i = 1
    keyboard = InlineKeyboardMarkup()
    for el in themes[speaker_id - 1]:
        text += f'\n{i}. {el}'
        keyboard.add(InlineKeyboardButton(f'–¢–µ–º–∞ {i}', callback_data=f'theme_{i}_sp_{speaker_id}'))
        i += 1
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)
    await states.reg.CHOOSE_THEME.set()


@dp.callback_query_handler(lambda c: c.data[:4] == 'date', state=states.reg.CHOOSE_DATE)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    theme_id = int(call.data[7])
    speaker_id = int(call.data[5])
    date = call.data[-1]

    res = []
    for el in slots_speakers[speaker_id-1]:

        if db.get_slot_status(speaker_id, el, date) == None:
            res.append(InlineKeyboardButton(text=slots[el], callback_data=f'slot_{speaker_id}_{theme_id}_{date}_{el}'))

    keyboard = InlineKeyboardMarkup(row_width=3)
    l=len(res)
    if l==6:
        keyboard.add(res[0], res[1], res[2], res[3], res[4], res[5])
    elif l==5:
        keyboard.add(res[0], res[1], res[2], res[3], res[4])
    elif l==4:
        keyboard.add(res[0], res[1], res[2], res[3])
    elif l==3:
        keyboard.add(res[0], res[1], res[2])
    elif l==2:
        keyboard.add(res[0], res[1])
    elif l==1:
        keyboard.add(res[0])
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_{speaker_id}_{theme_id}'))

    await bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏üëá',
                                reply_markup=keyboard)
    await states.reg.CHOOSE_SLOT.set()


@dp.callback_query_handler(lambda c: c.data[:4] == 'back', state=states.reg.CHOOSE_SLOT)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id


    theme_id = int(call.data[7])
    speaker_id = int(call.data[5])

    keyboard = InlineKeyboardMarkup()
    if int(speaker_id) <= 3:
        keyboard.add(InlineKeyboardButton('4 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_1'))
        keyboard.add(InlineKeyboardButton('5 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_2'))
    elif int(speaker_id) == 4:
        keyboard.add(InlineKeyboardButton('4 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_1'))
    elif int(speaker_id) == 5:
        keyboard.add(InlineKeyboardButton('5 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data=f'date_{speaker_id}_{theme_id}_2'))

    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'back_{speaker_id}'))

    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É üëá',
                                reply_markup=keyboard)
    await states.reg.CHOOSE_DATE.set()



@dp.callback_query_handler(lambda c: c.data[:4] == 'slot', state=states.reg.CHOOSE_SLOT)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    theme_id = int(call.data[7])
    speaker_id = int(call.data[5])
    date = call.data[9]
    slot_id = int(call.data[11:])
    if date == '1':
        data = '4 —Å–µ–Ω—Ç—è–±—Ä—è'
    else:
        data = '5 —Å–µ–Ω—Ç—è–±—Ä—è'
    text = f'–ü—Ä–æ–≤–µ—Ä—å –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞:\n' \
           f'‚Äì {speakers[speaker_id-1]}\n' \
           f'‚Äì {themes[speaker_id-1][theme_id-1]}\n' \
           f'‚Äì {data}\n' \
           f'‚Äì {slots[slot_id]}'


    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data=f'conf_{speaker_id}_{theme_id}_{date}_{slot_id}'))
    keyboard.add(InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data=f'back_{speaker_id}_{theme_id}_{date}_{slot_id}'))
    await bot.edit_message_text(message_id=message_id, chat_id=chat_id, text=text, reply_markup=keyboard)

    await states.reg.CONFIRM.set()

@dp.callback_query_handler(lambda c: c.data[:4] == 'back', state=states.reg.CONFIRM)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    theme_id = int(call.data[7])
    speaker_id = int(call.data[5])
    date = call.data[9]


    res = []
    for el in slots_speakers[speaker_id - 1]:

        if db.get_slot_status(speaker_id, el, date) == None:
            res.append(InlineKeyboardButton(text=slots[el], callback_data=f'slot_{speaker_id}_{theme_id}_{date}_{el}'))

    keyboard = InlineKeyboardMarkup(row_width=3)
    l = len(res)
    if l == 6:
        keyboard.add(res[0], res[1], res[2], res[3], res[4], res[5])
    elif l == 5:
        keyboard.add(res[0], res[1], res[2], res[3], res[4])
    elif l == 4:
        keyboard.add(res[0], res[1], res[2], res[3])
    elif l == 3:
        keyboard.add(res[0], res[1], res[2])
    elif l == 2:
        keyboard.add(res[0], res[1])
    elif l == 1:
        keyboard.add(res[0])
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_{speaker_id}_{theme_id}'))

    await bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏üëá',
                                reply_markup=keyboard)
    await states.reg.CHOOSE_SLOT.set()



@dp.callback_query_handler(lambda c: c.data[:4] == 'conf', state=states.reg.CONFIRM)
async def choose_speaker(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    theme_id = int(call.data[7])
    speaker_id = int(call.data[5])
    date = call.data[9]
    slot_id = int(call.data[11:])

    user = db.get_user(chat_id)
    name = user.name
    phone = user.phone
    company = user.company
    prof = user.prof



    id = db.add_approve(chat_id, speaker_id, theme_id, int(date), slot_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'appr_{id}'))
    keyboard.add(InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'disa_{id}'))

    if date == '1':
        data = '4 —Å–µ–Ω—Ç—è–±—Ä—è'
    else:
        data = '5 —Å–µ–Ω—Ç—è–±—Ä—è'

    text = f'–ó–∞—è–≤–∫–∞ ‚Ññ{id}\n' \
           f'–ò–º—è: {name}\n' \
           f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n' \
           f'–ö–æ–º–ø–∞–Ω–∏—è: {company}\n' \
           f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {prof}\n' \
           f'–°–ø–∏–∫–µ—Ä: {speakers[speaker_id-1]}\n' \
           f'–¢–µ–º–∞: {themes[speaker_id-1][theme_id-1]}\n' \
           f'–î–∞—Ç–∞: {data}\n' \
           f'–í—Ä–µ–º—è: {slots[slot_id]}'

    await bot.send_message(group_id, text, reply_markup=keyboard)

    await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
    await bot.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ, –¥–æ–∂–¥–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üòâ', reply_markup=kb.menu)
    # text = '–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è üòå\n\n' \
    #        '1. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–µ–¥–æ—Ä–æ–≤–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n' \
    #        '2. –í–∏—Ç–∞–ª–∏–π –¢—É–º–∞–Ω–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
    #        '3. –ê–Ω–¥—Ä–µ–π –†—ã–±–∏–Ω—Ü–µ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º\n' \
    #        '4. –ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∞—Å–æ–≤, –¥–∏–∑–∞–π–Ω-–¥–∏—Ä–µ–∫—Ç–æ—Ä\n' \
    #        '5. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞–ø—É—Å—Ç–∏–Ω, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
    # await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=kb.speakers)


@dp.message_handler(text='üëà –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def menu(message: Message):
    text = '–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è üòå\n\n' \
           '1. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –§–µ–¥–æ—Ä–æ–≤–∞, –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ê–≤—Ç–æ, –£—Å–ª—É–≥–∏, –†–∞–±–æ—Ç–∞\n' \
           '2. –í–∏—Ç–∞–ª–∏–π –¢—É–º–∞–Ω–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' \
           '3. –ê–Ω–¥—Ä–µ–π –†—ã–±–∏–Ω—Ü–µ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º\n' \
           '4. –ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∞—Å–æ–≤, –¥–∏–∑–∞–π–Ω-–¥–∏—Ä–µ–∫—Ç–æ—Ä\n' \
           '5. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∞–ø—É—Å—Ç–∏–Ω, –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
    await message.answer(text=text, reply_markup=kb.speakers)
    await states.reg.CHOOSE_SPEAKER.set()


@dp.message_handler(text='üóì –ú–æ–∏ —Å–ª–æ—Ç—ã', state='*')
async def menu(message: Message):
    chat_id = message.from_user.id

    approves = db.get_approve_by_chat_id(chat_id)
    i=0
    for approve in approves:

        approve_id = approve.id
        speaker_id = approve.speaker_id
        theme_id = approve.theme_id
        date = approve.date
        slot_id = approve.slot_id
        if date == '1':
            data = '4 —Å–µ–Ω—Ç—è–±—Ä—è'
        else:
            data = '5 —Å–µ–Ω—Ç—è–±—Ä—è'

        text = f'–°–ª–æ—Ç {i}\n ' \
               f'{themes[speaker_id-1][theme_id-1]}\n' \
               f'{speakers[speaker_id-1]}\n' \
               f'{data}\n' \
               f'{slots[slot_id]}'

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'stop_{approve_id}'))
        await bot.send_message(chat_id, text, reply_markup=keyboard)


        i+=1

@dp.callback_query_handler(lambda c: c.data[:4] == 'stop', state='*')
async def delete(call: CallbackQuery):
    chat_id = call.from_user.id
    message_id = call.message.message_id


    approve_id = call.data[5:]
    db.del_approve(approve_id)

    await bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
    await call.answer('–°–ª–æ—Ç –æ—Ç–º–µ–Ω–µ–Ω')



@dp.callback_query_handler(chat_id=group_id, state='*')
async def choose_speaker(call: CallbackQuery):

    message_id = call.message.message_id


    approve_id = call.data[5:]
    status = call.data[:4]

    approve = db.get_approve(approve_id)
    if approve == []:
        await bot.edit_message_reply_markup(chat_id=group_id, message_id=message_id, reply_markup=None)
        return

    chat_id = approve.chat_id
    speaker_id = approve.speaker_id
    theme_id = approve.theme_id
    date = approve.date
    slot_id = approve.slot_id




    if status=='appr':
        db.set_approve_status(approve_id, True)

        slot_status = db.get_slot_status(speaker_id, slot_id, date)
        if slot_status==(True, ):
            await call.answer('–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç')
            return
        await bot.send_message(chat_id, '–ó–∞–ø–∏—Å–∞–ª–∏! üôåüèª\n'
                                        '–ü—Ä–∏—Ö–æ–¥–∏ –≤ –ù–µ—Ç–≤–æ—Ä–∫-–±–∞—Ä –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ ‚Äî –∫–∞–∫ —Ä–∞–∑ —É—Å–ø–µ–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ üòâ')
        await bot.edit_message_reply_markup(chat_id=group_id, message_id=message_id, reply_markup=None)
        db.add_slot(speaker_id, date, slot_id)
        async def push():
            await bot.send_message(chat_id, '–í—Å—Ç—Ä–µ—á–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –ê–≤–∏—Ç–æ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç!\n'
                                            '–ñ–¥—ë–º —Ç–µ–±—è üòé')

        slot = slots[slot_id]

        hour = int(slot[0:2])
        mins = int(slot[3:5])

        run_date = datetime.datetime(2023, 9, int(date)+3, hour, mins)- datetime.timedelta(minutes=10)
        x = scheduler.add_job(push, 'date', run_date=run_date)
        print(x)


    elif status=='disa':
        db.set_approve_status(approve_id, False)


        await bot.send_message(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω üòî')
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)